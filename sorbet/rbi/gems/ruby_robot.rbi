# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby_robot/all/ruby_robot.rbi
#
# ruby_robot-0.1.11
module RubyRobot
end
class RubyRobot::Tabletop
  def calculate_position(orig_position, direction_sym); end
  def height; end
  def height_range; end
  def initialize(width, height); end
  def inspect; end
  def move(robot, direction_sym); end
  def move?(robot, direction_sym); end
  def place(robot, x: nil, y: nil); end
  def place?(robot, direction_sym); end
  def placed?(robot); end
  def position(robot); end
  def width; end
  def width_range; end
end
class RubyRobot::NetflixTabletop < RubyRobot::Tabletop
  def initialize; end
end
class RubyRobot::Robot
  def dir_idx; end
  def direction; end
  def initialize(direction); end
  def inspect; end
  def left; end
  def move; end
  def place(tabletop); end
  def report; end
  def right; end
  def tabletop; end
end
class RubyRobot::ConstructionError < RuntimeError
end
module RubyRobot::SchemaLoader
  def load_schema(name); end
end
class RubyRobot::PlacementError < RuntimeError
end
class RubyRobot::Shell < Bombshell::Environment
  def LEFT; end
  def MOVE; end
  def PLACE(x, y, direction); end
  def QUIT; end
  def REPORT(to_stderr = nil); end
  def RIGHT; end
  def initialize; end
  def logger; end
  extend Bombshell::Shell::ClassMethods
  include Bombshell::Shell
end
module IRB
end
class IRB::Irb
end
module Bombshell
end
module Bombshell::Shell
end
class RubyRobot::Webapp < Sinatra::Base
  def formatted_report; end
  def max_error_message_length; end
  def not_placed_error; end
  def position_report; end
  def request_schema; end
  def response_schema; end
  def robot; end
  def self.app_file; end
  def self.app_file=(val); end
  def self.app_file?; end
  def self.public_folder; end
  def self.public_folder=(val); end
  def self.public_folder?; end
  def self.static; end
  def self.static=(val); end
  def self.static?; end
  include RubyRobot::SchemaLoader
end
class RubyRobot::RubyRobotRequest
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_hash; end
  def to_json; end
  def to_s; end
end
module RubyRobot::RubyRobotRequest::Direction
  def self.descriptor; end
  def self.lookup(arg0); end
  def self.resolve(arg0); end
end
class RubyRobot::RubyRobotError
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_hash; end
  def to_s; end
end
class RubyRobot::RubyRobotResponse
  def ==(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def clone; end
  def dup; end
  def eql?(arg0); end
  def hash; end
  def initialize(*arg0); end
  def inspect; end
  def method_missing(*arg0); end
  def respond_to_missing?(*arg0); end
  def self.decode(arg0); end
  def self.decode_json(*arg0); end
  def self.descriptor; end
  def self.encode(arg0); end
  def self.encode_json(*arg0); end
  def to_h; end
  def to_hash; end
  def to_s; end
end
module RubyRobot::RubyRobot
end
class RubyRobot::RubyRobot::Service
  def left(*arg0); end
  def move(*arg0); end
  def place(*arg0); end
  def remove(*arg0); end
  def report(*arg0); end
  def right(*arg0); end
  extend GRPC::GenericService::Dsl
  include GRPC::GenericService
end
class RubyRobot::RubyRobot::Stub < GRPC::ClientStub
  def initialize(host, creds, **kw); end
  def left(req, metadata = nil); end
  def move(req, metadata = nil); end
  def place(req, metadata = nil); end
  def remove(req, metadata = nil); end
  def report(req, metadata = nil); end
  def right(req, metadata = nil); end
end
class RubyRobot::GrpcShell < Bombshell::Environment
  def LEFT; end
  def MOVE; end
  def PLACE(x, y, direction); end
  def QUIT; end
  def REMOVE; end
  def REPORT(to_stderr = nil); end
  def RIGHT; end
  def initialize; end
  def self.remote_url=(new_url); end
  extend Bombshell::Shell::ClassMethods
  include Bombshell::Shell
end
