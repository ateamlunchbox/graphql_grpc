# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activesupport/all/activesupport.rbi
#
# activesupport-5.2.3
class Regexp
  def multiline?; end
end
class Module
  def alias_attribute(new_name, old_name); end
  def cattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def cattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def cattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def delegate(*methods, to: nil, prefix: nil, allow_nil: nil); end
  def delegate_missing_to(target); end
  def deprecate(*method_names); end
  def mattr_accessor(*syms, instance_reader: nil, instance_writer: nil, instance_accessor: nil, default: nil, &blk); end
  def mattr_reader(*syms, instance_reader: nil, instance_accessor: nil, default: nil); end
  def mattr_writer(*syms, instance_writer: nil, instance_accessor: nil, default: nil); end
  def method_visibility(method); end
  def redefine_method(method, &block); end
  def redefine_singleton_method(method, &block); end
  def silence_redefinition_of_method(method); end
end
class Module::DelegationError < NoMethodError
end
class Array
  def blank?; end
  def extract_options!; end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  def to_param; end
  def to_query(key); end
  def to_sentence(options = nil); end
  def to_xml(options = nil); end
end
class Hash
  def _deep_transform_keys_in_object!(object, &block); end
  def _deep_transform_keys_in_object(object, &block); end
  def assert_valid_keys(*valid_keys); end
  def blank?; end
  def deep_merge!(other_hash, &block); end
  def deep_merge(other_hash, &block); end
  def deep_stringify_keys!; end
  def deep_stringify_keys; end
  def deep_symbolize_keys!; end
  def deep_symbolize_keys; end
  def deep_transform_keys!(&block); end
  def deep_transform_keys(&block); end
  def except!(*keys); end
  def except(*keys); end
  def extract!(*keys); end
  def extractable_options?; end
  def slice!(*keys); end
  def stringify_keys!; end
  def stringify_keys; end
  def symbolize_keys!; end
  def symbolize_keys; end
  def to_options!; end
  def to_options; end
  def to_param(namespace = nil); end
  def to_query(namespace = nil); end
end
module ActiveSupport
  extend ActiveSupport::LazyLoadHooks
end
module ActiveSupport::LazyLoadHooks
  def execute_hook(name, base, options, block); end
  def on_load(name, options = nil, &block); end
  def run_load_hooks(name, base = nil); end
  def self.extended(base); end
  def with_execution_control(name, block, once); end
end
module Kernel
  def class_eval(*args, &block); end
  def enable_warnings; end
  def self.enable_warnings; end
  def self.silence_warnings; end
  def self.suppress(*exception_classes); end
  def self.with_warnings(flag); end
  def silence_warnings; end
  def suppress(*exception_classes); end
  def with_warnings(flag); end
end
class ActiveSupport::Deprecation
  def self.allocate; end
  def self.behavior(*args, &block); end
  def self.behavior=(arg); end
  def self.debug(*args, &block); end
  def self.debug=(arg); end
  def self.deprecate_methods(*args, &block); end
  def self.deprecation_horizon(*args, &block); end
  def self.deprecation_horizon=(arg); end
  def self.deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def self.gem_name(*args, &block); end
  def self.gem_name=(arg); end
  def self.initialize(*args, &block); end
  def self.instance; end
  def self.new(*arg0); end
  def self.silence(*args, &block); end
  def self.silenced(*args, &block); end
  def self.silenced=(arg); end
  def self.warn(message = nil, callstack = nil); end
  extend ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  extend Singleton::SingletonClassMethods
  include ActiveSupport::Deprecation::Behavior
  include ActiveSupport::Deprecation::InstanceDelegator
  include ActiveSupport::Deprecation::MethodWrapper
  include ActiveSupport::Deprecation::Reporting
  include Singleton
end
module ActiveSupport::Deprecation::InstanceDelegator
  def self.included(base); end
end
module ActiveSupport::Deprecation::InstanceDelegator::ClassMethods
  def include(included_module); end
  def method_added(method_name); end
end
module ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Notifications
  def self.instrument(name, payload = nil); end
  def self.instrumenter; end
  def self.notifier; end
  def self.notifier=(arg0); end
  def self.publish(name, *args); end
  def self.subscribe(*args, &block); end
  def self.subscribed(callback, *args, &block); end
  def self.unsubscribe(subscriber_or_name); end
end
class ActiveSupport::Notifications::Instrumenter
  def finish(name, payload); end
  def finish_with_state(listeners_state, name, payload); end
  def id; end
  def initialize(notifier); end
  def instrument(name, payload = nil); end
  def start(name, payload); end
  def unique_id; end
end
class ActiveSupport::Notifications::Event
  def <<(event); end
  def children; end
  def duration; end
  def end; end
  def end=(arg0); end
  def initialize(name, start, ending, transaction_id, payload); end
  def name; end
  def parent_of?(event); end
  def payload; end
  def time; end
  def transaction_id; end
end
class ActiveSupport::Notifications::Fanout
  def finish(name, id, payload, listeners = nil); end
  def initialize; end
  def listeners_for(name); end
  def listening?(name); end
  def lock; end
  def locked?; end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribe(pattern = nil, block = nil); end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  def unsubscribe(subscriber_or_name); end
  def wait; end
  include Mutex_m
end
module ActiveSupport::Notifications::Fanout::Subscribers
  def self.new(pattern, listener); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def initialize(pattern, delegate); end
  def matches?(name); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::Timed < ActiveSupport::Notifications::Fanout::Subscribers::Evented
  def finish(name, id, payload); end
  def publish(name, *args); end
  def start(name, id, payload); end
end
class ActiveSupport::Notifications::Fanout::Subscribers::AllMessages
  def finish(name, id, payload); end
  def initialize(delegate); end
  def matches?(arg0); end
  def publish(name, *args); end
  def start(name, id, payload); end
  def subscribed_to?(name); end
end
module ActiveSupport::PerThreadRegistry
  def instance; end
  def method_missing(name, *args, &block); end
  def self.extended(object); end
end
class ActiveSupport::Notifications::InstrumentationRegistry
  def initialize; end
  def instrumenter_for(notifier); end
  extend ActiveSupport::PerThreadRegistry
end
class ActiveSupport::DeprecationException < StandardError
end
module ActiveSupport::Deprecation::Behavior
  def arity_coerce(behavior); end
  def behavior; end
  def behavior=(behavior); end
  def debug; end
  def debug=(arg0); end
end
module ActiveSupport::Deprecation::Reporting
  def _extract_callstack(callstack); end
  def deprecated_method_warning(method_name, message = nil); end
  def deprecation_caller_message(callstack); end
  def deprecation_message(callstack, message = nil); end
  def deprecation_warning(deprecated_method_name, message = nil, caller_backtrace = nil); end
  def extract_callstack(callstack); end
  def gem_name; end
  def gem_name=(arg0); end
  def ignored_callstack(path); end
  def silence; end
  def silenced; end
  def silenced=(arg0); end
  def warn(message = nil, callstack = nil); end
end
module ActiveSupport::Deprecation::DeprecatedConstantAccessor
  def self.included(base); end
end
module ActiveSupport::Deprecation::MethodWrapper
  def deprecate_methods(target_module, *method_names); end
end
class ActiveSupport::Deprecation::DeprecationProxy
  def inspect; end
  def method_missing(called, *args, &block); end
  def self.new(*args, &block); end
end
class ActiveSupport::Deprecation::DeprecatedObjectProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(object, message, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy < ActiveSupport::Deprecation::DeprecationProxy
  def initialize(instance, method, var = nil, deprecator = nil); end
  def target; end
  def warn(callstack, called, args); end
end
class ActiveSupport::Deprecation::DeprecatedConstantProxy < ActiveSupport::Deprecation::DeprecationProxy
  def class; end
  def initialize(old_const, new_const, deprecator = nil, message: nil); end
  def target; end
  def warn(callstack, called, args); end
end
module ActiveSupport::Inflector
  def apply_inflections(word, rules, locale = nil); end
  def camelize(term, uppercase_first_letter = nil); end
  def classify(table_name); end
  def const_regexp(camel_cased_word); end
  def constantize(camel_cased_word); end
  def dasherize(underscored_word); end
  def deconstantize(path); end
  def demodulize(path); end
  def foreign_key(class_name, separate_class_name_and_id_with_underscore = nil); end
  def humanize(lower_case_and_underscored_word, capitalize: nil, keep_id_suffix: nil); end
  def inflections(locale = nil); end
  def ordinal(number); end
  def ordinalize(number); end
  def parameterize(string, separator: nil, preserve_case: nil); end
  def pluralize(word, locale = nil); end
  def safe_constantize(camel_cased_word); end
  def singularize(word, locale = nil); end
  def tableize(class_name); end
  def titleize(word, keep_id_suffix: nil); end
  def transliterate(string, replacement = nil); end
  def underscore(camel_cased_word); end
  def upcase_first(string); end
  extend ActiveSupport::Inflector
  extend ActiveSupport::Inflector
end
class ActiveSupport::Inflector::Inflections
  def acronym(word); end
  def acronym_regex(*args, &block); end
  def acronym_regex_with_deprecation(*args, &block); end
  def acronym_regex_without_deprecation; end
  def acronyms; end
  def acronyms_camelize_regex; end
  def acronyms_underscore_regex; end
  def clear(scope = nil); end
  def define_acronym_regex_patterns; end
  def human(rule, replacement); end
  def humans; end
  def initialize; end
  def initialize_dup(orig); end
  def irregular(singular, plural); end
  def plural(rule, replacement); end
  def plurals; end
  def self.instance(locale = nil); end
  def singular(rule, replacement); end
  def singulars; end
  def uncountable(*words); end
  def uncountables; end
end
class ActiveSupport::Inflector::Inflections::Uncountables < Array
  def <<(*word); end
  def add(words); end
  def delete(entry); end
  def initialize; end
  def to_regex(string); end
  def uncountable?(str); end
end
module ActiveSupport::Multibyte
  def self.proxy_class; end
  def self.proxy_class=(klass); end
end
class String
  def acts_like_string?; end
  def at(position); end
  def blank?; end
  def camelcase(first_letter = nil); end
  def camelize(first_letter = nil); end
  def classify; end
  def constantize; end
  def dasherize; end
  def deconstantize; end
  def demodulize; end
  def ends_with?(*arg0); end
  def exclude?(string); end
  def first(limit = nil); end
  def foreign_key(separate_class_name_and_id_with_underscore = nil); end
  def from(position); end
  def html_safe; end
  def humanize(capitalize: nil, keep_id_suffix: nil); end
  def in_time_zone(zone = nil); end
  def indent!(amount, indent_string = nil, indent_empty_lines = nil); end
  def indent(amount, indent_string = nil, indent_empty_lines = nil); end
  def inquiry; end
  def is_utf8?; end
  def last(limit = nil); end
  def mb_chars; end
  def parameterize(separator: nil, preserve_case: nil); end
  def pluralize(count = nil, locale = nil); end
  def remove!(*patterns); end
  def remove(*patterns); end
  def safe_constantize; end
  def singularize(locale = nil); end
  def squish!; end
  def squish; end
  def starts_with?(*arg0); end
  def strip_heredoc; end
  def tableize; end
  def titlecase(keep_id_suffix: nil); end
  def titleize(keep_id_suffix: nil); end
  def to(position); end
  def to_date; end
  def to_datetime; end
  def to_time(form = nil); end
  def truncate(truncate_at, options = nil); end
  def truncate_words(words_count, options = nil); end
  def underscore; end
  def upcase_first; end
end
class DateTime < Date
  def <=>(other); end
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def change(options); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmtime; end
  def in(seconds); end
  def localtime(utc_offset = nil); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def noon; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.current; end
  def since(seconds); end
  def subsec; end
  def utc; end
  def utc?; end
  def utc_offset; end
end
class Object < BasicObject
  def acts_like?(duck); end
  def blank?; end
  def html_safe?; end
  def presence; end
  def present?; end
  def to_param; end
  def to_query(key); end
  include ActiveSupport::Tryable
end
class NilClass
  def blank?; end
  def to_param; end
  def try!(*args); end
  def try(*args); end
end
class FalseClass
  def blank?; end
  def to_param; end
end
class TrueClass
  def blank?; end
  def to_param; end
end
class Numeric
  def blank?; end
  def html_safe?; end
end
class Time
  def acts_like_time?; end
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_beginning_of_hour; end
  def at_beginning_of_minute; end
  def at_end_of_day; end
  def at_end_of_hour; end
  def at_end_of_minute; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def beginning_of_hour; end
  def beginning_of_minute; end
  def blank?; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def end_of_hour; end
  def end_of_minute; end
  def eql_with_coercion(other); end
  def eql_without_coercion(arg0); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_coercion(other); end
  def minus_with_duration(other); end
  def minus_without_coercion(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def rfc3339(fraction_digits = nil); end
  def sec_fraction; end
  def seconds_since_midnight; end
  def seconds_until_end_of_day; end
  def self.===(other); end
  def self.at_with_coercion(*args); end
  def self.at_without_coercion(*arg0); end
  def self.current; end
  def self.days_in_month(month, year = nil); end
  def self.days_in_year(year = nil); end
  def self.find_zone!(time_zone); end
  def self.find_zone(time_zone); end
  def self.rfc3339(str); end
  def self.use_zone(time_zone); end
  def self.zone; end
  def self.zone=(time_zone); end
  def self.zone_default; end
  def self.zone_default=(arg0); end
  def since(seconds); end
  def to_default_s; end
  def to_formatted_s(format = nil); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
module ActiveSupport::XmlMini_REXML
  def collapse(element, depth); end
  def empty_content?(element); end
  def get_attributes(element); end
  def merge!(hash, key, value); end
  def merge_element!(hash, element, depth); end
  def merge_texts!(hash, element); end
  def parse(data); end
  extend ActiveSupport::XmlMini_REXML
end
module ActiveSupport::XmlMini
  def _dasherize(key); end
  def _parse_binary(bin, entity); end
  def _parse_file(file, entity); end
  def backend; end
  def backend=(name); end
  def cast_backend_name_to_module(name); end
  def current_thread_backend; end
  def current_thread_backend=(name); end
  def depth; end
  def depth=(arg0); end
  def parse(*args, &block); end
  def rename_key(key, options = nil); end
  def to_tag(key, value, options); end
  def with_backend(name); end
  extend ActiveSupport::XmlMini
end
module ActiveSupport::XmlMini::FileLike
  def content_type; end
  def content_type=(arg0); end
  def original_filename; end
  def original_filename=(arg0); end
end
class ActiveSupport::Duration
  def %(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def ==(other); end
  def after(time = nil); end
  def ago(time = nil); end
  def as_json(options = nil); end
  def before(time = nil); end
  def coerce(other); end
  def encode_with(coder); end
  def eql?(other); end
  def from_now(time = nil); end
  def hash; end
  def init_with(coder); end
  def initialize(value, parts); end
  def inspect; end
  def instance_of?(klass); end
  def is_a?(klass); end
  def iso8601(precision: nil); end
  def kind_of?(klass); end
  def method_missing(method, *args, &block); end
  def parts; end
  def parts=(arg0); end
  def raise_type_error(other); end
  def respond_to_missing?(method, _); end
  def self.===(other); end
  def self.build(value); end
  def self.calculate_total_seconds(parts); end
  def self.days(value); end
  def self.hours(value); end
  def self.minutes(value); end
  def self.months(value); end
  def self.parse(iso8601duration); end
  def self.seconds(value); end
  def self.weeks(value); end
  def self.years(value); end
  def since(time = nil); end
  def sum(sign, time = nil); end
  def to_i; end
  def to_s; end
  def until(time = nil); end
  def value; end
  def value=(arg0); end
end
class ActiveSupport::Duration::Scalar < Numeric
  def %(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def -@; end
  def /(other); end
  def <=>(other); end
  def calculate(op, other); end
  def coerce(other); end
  def initialize(value); end
  def raise_type_error(other); end
  def to_f(*args, &block); end
  def to_i(*args, &block); end
  def to_s(*args, &block); end
  def value; end
end
class ActiveSupport::TimeZone
  def <=>(zone); end
  def =~(re); end
  def at(secs); end
  def encode_with(coder); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def init_with(coder); end
  def initialize(name, utc_offset = nil, tzinfo = nil); end
  def iso8601(str); end
  def local(*args); end
  def local_to_utc(time, dst = nil); end
  def name; end
  def now; end
  def parse(str, now = nil); end
  def parts_to_time(parts, now); end
  def period_for_local(time, dst = nil); end
  def period_for_utc(time); end
  def periods_for_local(time); end
  def rfc3339(str); end
  def self.[](arg); end
  def self.all; end
  def self.clear; end
  def self.country_zones(country_code); end
  def self.create(*arg0); end
  def self.find_tzinfo(name); end
  def self.load_country_zones(code); end
  def self.new(name); end
  def self.seconds_to_utc_offset(seconds, colon = nil); end
  def self.us_zones; end
  def self.zones_map; end
  def strptime(str, format, now = nil); end
  def time_now; end
  def to_s; end
  def today; end
  def tomorrow; end
  def tzinfo; end
  def utc_offset; end
  def utc_to_local(time); end
  def yesterday; end
  include Comparable
end
module DateAndTime
end
module DateAndTime::Compatibility
  def preserve_timezone; end
  def self.preserve_timezone; end
  def self.preserve_timezone=(obj); end
end
class ActiveSupport::TimeWithZone
  def +(other); end
  def -(other); end
  def <=>(other); end
  def acts_like_time?; end
  def advance(options); end
  def ago(other); end
  def as_json(options = nil); end
  def between?(min, max); end
  def blank?; end
  def change(options); end
  def comparable_time; end
  def day; end
  def dst?; end
  def duration_of_variable_length?(obj); end
  def encode_with(coder); end
  def eql?(other); end
  def formatted_offset(colon = nil, alternate_utc_string = nil); end
  def freeze; end
  def future?; end
  def get_period_and_ensure_valid_local_time(period); end
  def getgm; end
  def getlocal(utc_offset = nil); end
  def getutc; end
  def gmt?; end
  def gmt_offset; end
  def gmtime; end
  def gmtoff; end
  def hash; end
  def hour; end
  def httpdate; end
  def in(other); end
  def in_time_zone(new_zone = nil); end
  def init_with(coder); end
  def initialize(utc_time, time_zone, local_time = nil, period = nil); end
  def inspect; end
  def is_a?(klass); end
  def isdst; end
  def iso8601(fraction_digits = nil); end
  def kind_of?(klass); end
  def localtime(utc_offset = nil); end
  def marshal_dump; end
  def marshal_load(variables); end
  def mday; end
  def method_missing(sym, *args, &block); end
  def min; end
  def mon; end
  def month; end
  def nsec; end
  def past?; end
  def period; end
  def respond_to?(sym, include_priv = nil); end
  def respond_to_missing?(sym, include_priv); end
  def rfc2822; end
  def rfc3339(fraction_digits = nil); end
  def rfc822; end
  def sec; end
  def self.name; end
  def since(other); end
  def strftime(format); end
  def time; end
  def time_zone; end
  def to_a; end
  def to_date; end
  def to_datetime; end
  def to_f; end
  def to_formatted_s(format = nil); end
  def to_i; end
  def to_r; end
  def to_s(format = nil); end
  def to_time; end
  def today?; end
  def transfer_time_values_to_utc_constructor(time); end
  def tv_sec; end
  def usec; end
  def utc; end
  def utc?; end
  def utc_offset; end
  def wday; end
  def wrap_with_time_zone(time); end
  def xmlschema(fraction_digits = nil); end
  def yday; end
  def year; end
  def zone; end
  include Comparable
end
module DateAndTime::Zones
  def in_time_zone(zone = nil); end
  def time_with_zone(time, zone); end
end
module ActiveSupport::Tryable
  def try!(*a, &b); end
  def try(*a, &b); end
end
class Delegator < BasicObject
  include ActiveSupport::Tryable
end
module DateAndTime::Calculations
  def all_day; end
  def all_month; end
  def all_quarter; end
  def all_week(start_day = nil); end
  def all_year; end
  def at_beginning_of_month; end
  def at_beginning_of_quarter; end
  def at_beginning_of_week(start_day = nil); end
  def at_beginning_of_year; end
  def at_end_of_month; end
  def at_end_of_quarter; end
  def at_end_of_week(start_day = nil); end
  def at_end_of_year; end
  def beginning_of_month; end
  def beginning_of_quarter; end
  def beginning_of_week(start_day = nil); end
  def beginning_of_year; end
  def copy_time_to(other); end
  def days_ago(days); end
  def days_since(days); end
  def days_span(day); end
  def days_to_week_start(start_day = nil); end
  def end_of_month; end
  def end_of_quarter; end
  def end_of_week(start_day = nil); end
  def end_of_year; end
  def first_hour(date_or_time); end
  def future?; end
  def last_hour(date_or_time); end
  def last_month; end
  def last_quarter; end
  def last_week(start_day = nil, same_time: nil); end
  def last_weekday; end
  def last_year; end
  def monday; end
  def months_ago(months); end
  def months_since(months); end
  def next_day(days = nil); end
  def next_month(months = nil); end
  def next_occurring(day_of_week); end
  def next_quarter; end
  def next_week(given_day_in_next_week = nil, same_time: nil); end
  def next_weekday; end
  def next_year(years = nil); end
  def on_weekday?; end
  def on_weekend?; end
  def past?; end
  def prev_day(days = nil); end
  def prev_month(months = nil); end
  def prev_occurring(day_of_week); end
  def prev_quarter; end
  def prev_week(start_day = nil, same_time: nil); end
  def prev_weekday; end
  def prev_year(years = nil); end
  def sunday; end
  def today?; end
  def tomorrow; end
  def weeks_ago(weeks); end
  def weeks_since(weeks); end
  def years_ago(years); end
  def years_since(years); end
  def yesterday; end
end
class Date
  def advance(options); end
  def ago(seconds); end
  def at_beginning_of_day; end
  def at_end_of_day; end
  def at_midday; end
  def at_middle_of_day; end
  def at_midnight; end
  def at_noon; end
  def beginning_of_day; end
  def change(options); end
  def compare_with_coercion(other); end
  def compare_without_coercion(arg0); end
  def end_of_day; end
  def in(seconds); end
  def midday; end
  def middle_of_day; end
  def midnight; end
  def minus_with_duration(other); end
  def minus_without_duration(arg0); end
  def noon; end
  def plus_with_duration(other); end
  def plus_without_duration(arg0); end
  def self.beginning_of_week; end
  def self.beginning_of_week=(week_start); end
  def self.beginning_of_week_default; end
  def self.beginning_of_week_default=(arg0); end
  def self.current; end
  def self.find_beginning_of_week!(week_start); end
  def self.tomorrow; end
  def self.yesterday; end
  def since(seconds); end
  include DateAndTime::Calculations
  include DateAndTime::Zones
end
module ActiveSupport::Multibyte::Unicode
  def apply_mapping(string, mapping); end
  def compose(codepoints); end
  def database; end
  def decompose(type, codepoints); end
  def default_normalization_form; end
  def default_normalization_form=(arg0); end
  def downcase(string); end
  def in_char_class?(codepoint, classes); end
  def normalize(string, form = nil); end
  def pack_graphemes(unpacked); end
  def recode_windows1252_chars(string); end
  def reorder_characters(codepoints); end
  def swapcase(string); end
  def tidy_bytes(string, force = nil); end
  def unpack_graphemes(string); end
  def upcase(string); end
  extend ActiveSupport::Multibyte::Unicode
end
class ActiveSupport::Multibyte::Unicode::Codepoint
  def code; end
  def code=(arg0); end
  def combining_class; end
  def combining_class=(arg0); end
  def decomp_mapping; end
  def decomp_mapping=(arg0); end
  def decomp_type; end
  def decomp_type=(arg0); end
  def initialize; end
  def lowercase_mapping; end
  def lowercase_mapping=(arg0); end
  def swapcase_mapping; end
  def uppercase_mapping; end
  def uppercase_mapping=(arg0); end
end
class ActiveSupport::Multibyte::Unicode::UnicodeDatabase
  def boundary; end
  def boundary=(arg0); end
  def codepoints; end
  def codepoints=(arg0); end
  def composition_exclusion; end
  def composition_exclusion=(arg0); end
  def composition_map; end
  def composition_map=(arg0); end
  def cp1252; end
  def cp1252=(arg0); end
  def initialize; end
  def load; end
  def self.dirname; end
  def self.filename; end
end
class ERB
end
module ERB::Util
  def html_escape_once(s); end
  def json_escape(s); end
  def self.html_escape_once(s); end
  def self.json_escape(s); end
  def self.unwrapped_html_escape(s); end
  def unwrapped_html_escape(s); end
end
class ActiveSupport::SafeBuffer < String
  def %(args); end
  def +(other); end
  def <<(value); end
  def [](*args); end
  def capitalize!(*args); end
  def capitalize(*args, &block); end
  def chomp!(*args); end
  def chomp(*args, &block); end
  def chop!(*args); end
  def chop(*args, &block); end
  def clone_empty; end
  def concat(value); end
  def delete!(*args); end
  def delete(*args, &block); end
  def downcase!(*args); end
  def downcase(*args, &block); end
  def encode_with(coder); end
  def gsub!(*args); end
  def gsub(*args, &block); end
  def html_escape_interpolated_argument(arg); end
  def html_safe?; end
  def initialize(str = nil); end
  def initialize_copy(other); end
  def lstrip!(*args); end
  def lstrip(*args, &block); end
  def next!(*args); end
  def next(*args, &block); end
  def original_concat(*arg0); end
  def prepend(value); end
  def reverse!(*args); end
  def reverse(*args, &block); end
  def rstrip!(*args); end
  def rstrip(*args, &block); end
  def safe_concat(value); end
  def slice!(*args); end
  def slice(*args, &block); end
  def squeeze!(*args); end
  def squeeze(*args, &block); end
  def strip!(*args); end
  def strip(*args, &block); end
  def sub!(*args); end
  def sub(*args, &block); end
  def succ!(*args); end
  def succ(*args, &block); end
  def swapcase!(*args); end
  def swapcase(*args, &block); end
  def to_param; end
  def to_s; end
  def tr!(*args); end
  def tr(*args, &block); end
  def tr_s!(*args); end
  def tr_s(*args, &block); end
  def upcase!(*args); end
  def upcase(*args, &block); end
end
class ActiveSupport::SafeBuffer::SafeConcatError < StandardError
  def initialize; end
end
class ActiveSupport::StringInquirer < String
  def method_missing(method_name, *arguments); end
  def respond_to_missing?(method_name, include_private = nil); end
end
