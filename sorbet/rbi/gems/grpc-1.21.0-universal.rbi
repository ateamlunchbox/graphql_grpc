# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/grpc-1.21.0-universal/all/grpc-1.21.0-universal.rbi
#
# grpc-1.21.0-universal-darwin
class Struct::NewServerRpc < Struct
  def call; end
  def call=(_); end
  def deadline; end
  def deadline=(_); end
  def host; end
  def host=(_); end
  def metadata; end
  def metadata=(_); end
  def method; end
  def method=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Struct::Status < Struct
  def code; end
  def code=(_); end
  def details; end
  def details=(_); end
  def metadata; end
  def metadata=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class GRPC::Core::Channel
  def close; end
  def connectivity_state(*arg0); end
  def create_call(arg0, arg1, arg2, arg3, arg4); end
  def destroy; end
  def initialize(*arg0); end
  def initialize_copy(arg0); end
  def target; end
  def watch_connectivity_state(arg0, arg1); end
end
class GRPC::Core::Call
  def cancel; end
  def cancel_with_status(arg0, arg1); end
  def close; end
  def initialize; end
  def initialize_copy(arg0); end
  def metadata; end
  def metadata=(arg0); end
  def peer; end
  def peer_cert; end
  def run_batch(arg0); end
  def set_credentials!(arg0); end
  def status; end
  def status=(arg0); end
  def trailing_metadata; end
  def trailing_metadata=(arg0); end
  def write_flag; end
  def write_flag=(arg0); end
end
class Struct::BatchResult < Struct
  def cancelled; end
  def cancelled=(_); end
  def check_status; end
  def message; end
  def message=(_); end
  def metadata; end
  def metadata=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def send_close; end
  def send_close=(_); end
  def send_message; end
  def send_message=(_); end
  def send_metadata; end
  def send_metadata=(_); end
  def send_status; end
  def send_status=(_); end
  def status; end
  def status=(_); end
end
class GRPC::Core::CallCredentials
  def compose(*arg0); end
  def initialize(arg0); end
  def initialize_copy(arg0); end
end
class GRPC::Core::ChannelCredentials
  def compose(*arg0); end
  def initialize(*arg0); end
  def initialize_copy(arg0); end
  def self.set_default_roots_pem(arg0); end
  def set_default_roots_pem(arg0); end
end
class GRPC::Core::Server
  def add_http2_port(arg0, arg1); end
  def close; end
  def destroy; end
  def initialize(arg0); end
  def initialize_copy(arg0); end
  def request_call; end
  def shutdown_and_notify(arg0); end
  def start; end
end
class GRPC::Core::ServerCredentials
  def initialize(arg0, arg1, arg2); end
  def initialize_copy(arg0); end
end
class GRPC::Core::TimeSpec
  def inspect; end
  def to_s; end
  def to_time; end
end
class GRPC::Core::CompressionOptions
  def algorithm_enabled?(arg0); end
  def default_algorithm; end
  def default_level; end
  def disabled_algorithms; end
  def initialize(*arg0); end
  def to_channel_arg_hash; end
  def to_hash; end
end
module GRPC
  extend GRPC::DefaultLogger
end
class GRPC::BadStatus < StandardError
  def code; end
  def details; end
  def initialize(code, details = nil, metadata = nil); end
  def metadata; end
  def self.new_status_exception(code, details = nil, metadata = nil); end
  def to_rpc_status; end
  def to_status; end
  include GRPC::Core::StatusCodes
end
class GRPC::Ok < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Cancelled < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Unknown < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::InvalidArgument < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::DeadlineExceeded < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::NotFound < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::AlreadyExists < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::PermissionDenied < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Unauthenticated < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::ResourceExhausted < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::FailedPrecondition < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Aborted < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::OutOfRange < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Unimplemented < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Internal < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::Unavailable < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
class GRPC::DataLoss < GRPC::BadStatus
  def initialize(details = nil, metadata = nil); end
end
module GRPC::DefaultLogger
  def logger; end
end
class GRPC::DefaultLogger::NoopLogger
  def debug(_ignored); end
  def info(_ignored); end
  def warn(_ignored); end
end
class GRPC::Notifier
  def initialize; end
  def notified; end
  def notified?; end
  def notify(payload); end
  def payload; end
  def wait; end
end
module GRPC::Core
end
module GRPC::Core::TimeConsts
  def from_relative_time(timeish); end
  def self.from_relative_time(timeish); end
end
class GRPC::BidiCall
  def initialize(call, marshal, unmarshal, metadata_received: nil, req_view: nil); end
  def read_loop(set_input_stream_done, is_client: nil); end
  def read_next_loop(finalize_stream, is_client = nil); end
  def read_using_run_batch; end
  def run_on_client(requests, set_input_stream_done, set_output_stream_done, &blk); end
  def run_on_server(gen_each_reply, requests); end
  def write_loop(requests, is_client: nil, set_output_stream_done: nil); end
  include GRPC::Core::CallOps
  include GRPC::Core::StatusCodes
  include GRPC::Core::TimeConsts
end
class Struct
end
class GRPC::ActiveCall
  def attach_peer_cert(peer_cert); end
  def attach_status_results_and_complete_call(recv_status_batch_result); end
  def bidi_streamer(requests, metadata: nil, &blk); end
  def cancel(*args, &block); end
  def cancelled?; end
  def client_streamer(requests, metadata: nil); end
  def deadline; end
  def each_remote_read; end
  def each_remote_read_then_finish; end
  def get_message_from_batch_result(recv_message_batch_result); end
  def initialize(call, marshal, unmarshal, deadline, started: nil, metadata_received: nil, metadata_to_send: nil); end
  def interceptable; end
  def maybe_finish_and_close_call_locked; end
  def merge_metadata_to_send(new_metadata = nil); end
  def metadata(*args, &block); end
  def metadata_sent; end
  def metadata_to_send; end
  def multi_req_view; end
  def op_is_done; end
  def operation; end
  def output_metadata; end
  def peer; end
  def peer_cert; end
  def raise_error_if_already_executed; end
  def read_unary_request; end
  def receive_and_check_status; end
  def remote_read; end
  def remote_send(req, marshalled = nil); end
  def request_response(req, metadata: nil); end
  def run_server_bidi(mth, interception_ctx); end
  def self.client_invoke(call, metadata = nil); end
  def self.view_class(*visible_methods); end
  def send_initial_metadata(new_metadata = nil); end
  def send_status(code = nil, details = nil, assert_finished = nil, metadata: nil); end
  def server_streamer(req, metadata: nil); end
  def server_unary_response(req, trailing_metadata: nil, code: nil, details: nil); end
  def set_input_stream_done; end
  def set_output_stream_done; end
  def single_req_view; end
  def start_call(metadata = nil); end
  def status(*args, &block); end
  def trailing_metadata(*args, &block); end
  def wait; end
  def write_flag(*args, &block); end
  def write_flag=(*args, &block); end
  extend Forwardable
  include GRPC::Core::CallOps
  include GRPC::Core::TimeConsts
end
class GRPC::ActiveCall::SingleReqView
  def cancelled?(*args, &block); end
  def deadline(*args, &block); end
  def initialize(wrapped); end
  def merge_metadata_to_send(*args, &block); end
  def metadata(*args, &block); end
  def metadata_sent(*args, &block); end
  def metadata_to_send(*args, &block); end
  def output_metadata(*args, &block); end
  def peer(*args, &block); end
  def peer_cert(*args, &block); end
  def send_initial_metadata(*args, &block); end
  extend Forwardable
end
class GRPC::ActiveCall::MultiReqView
  def cancelled?(*args, &block); end
  def deadline(*args, &block); end
  def each_remote_read(*args, &block); end
  def initialize(wrapped); end
  def merge_metadata_to_send(*args, &block); end
  def metadata(*args, &block); end
  def metadata_sent(*args, &block); end
  def metadata_to_send(*args, &block); end
  def output_metadata(*args, &block); end
  def peer(*args, &block); end
  def peer_cert(*args, &block); end
  def send_initial_metadata(*args, &block); end
  extend Forwardable
end
class GRPC::ActiveCall::Operation
  def cancel(*args, &block); end
  def cancelled?(*args, &block); end
  def deadline(*args, &block); end
  def execute(*args, &block); end
  def initialize(wrapped); end
  def metadata(*args, &block); end
  def start_call(*args, &block); end
  def status(*args, &block); end
  def trailing_metadata(*args, &block); end
  def wait(*args, &block); end
  def write_flag(*args, &block); end
  def write_flag=(*args, &block); end
  extend Forwardable
end
class GRPC::ActiveCall::InterceptableView
  def deadline(*args, &block); end
  def initialize(wrapped); end
  extend Forwardable
end
class GRPC::ClientStub
  def bidi_streamer(method, requests, marshal, unmarshal, deadline: nil, return_op: nil, parent: nil, credentials: nil, metadata: nil, &blk); end
  def client_streamer(method, requests, marshal, unmarshal, deadline: nil, return_op: nil, parent: nil, credentials: nil, metadata: nil); end
  def initialize(host, creds, channel_override: nil, timeout: nil, propagate_mask: nil, channel_args: nil, interceptors: nil); end
  def new_active_call(method, marshal, unmarshal, deadline: nil, parent: nil, credentials: nil); end
  def propagate_mask=(arg0); end
  def request_response(method, req, marshal, unmarshal, deadline: nil, return_op: nil, parent: nil, credentials: nil, metadata: nil); end
  def self.setup_channel(alt_chan, host, creds, channel_args = nil); end
  def server_streamer(method, req, marshal, unmarshal, deadline: nil, return_op: nil, parent: nil, credentials: nil, metadata: nil, &blk); end
  include GRPC::Core::StatusCodes
  include GRPC::Core::TimeConsts
end
class Anonymous_Struct_1 < Struct
  def input; end
  def input=(_); end
  def marshal_method; end
  def marshal_method=(_); end
  def name; end
  def name=(_); end
  def output; end
  def output=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def unmarshal_method; end
  def unmarshal_method=(_); end
end
class GRPC::RpcDesc < Anonymous_Struct_1
  def arity_error(mth, want, msg); end
  def assert_arity_matches(mth); end
  def bidi_streamer?; end
  def client_streamer?; end
  def handle_bidi_streamer(active_call, mth, inter_ctx); end
  def handle_client_streamer(active_call, mth, inter_ctx); end
  def handle_request_response(active_call, mth, inter_ctx); end
  def handle_server_streamer(active_call, mth, inter_ctx); end
  def marshal_proc; end
  def request_response?; end
  def run_server_method(active_call, mth, inter_ctx = nil); end
  def send_status(active_client, code, details, metadata = nil); end
  def server_streamer?; end
  def unmarshal_proc(target); end
  include GRPC::Core::StatusCodes
end
class GRPC::RpcDesc::Stream
  def initialize(type); end
  def type; end
  def type=(arg0); end
end
module GRPC::GenericService
  def self.included(o); end
  def self.underscore(s); end
end
class GRPC::GenericService::DuplicateRpcName < StandardError
  def initialize(name); end
end
module GRPC::GenericService::Dsl
  def assert_can_marshal(cls); end
  def inherited(subclass); end
  def marshal_class_method; end
  def marshal_class_method=(arg0); end
  def rpc(name, input, output); end
  def rpc_descs; end
  def rpc_stub_class; end
  def service_name; end
  def service_name=(arg0); end
  def stream(cls); end
  def unmarshal_class_method; end
  def unmarshal_class_method=(arg0); end
end
class GRPC::Pool
  def forcibly_stop_workers; end
  def initialize(size, keep_alive: nil); end
  def jobs_waiting; end
  def loop_execute_jobs(worker_queue); end
  def ready_for_work?; end
  def remove_current_thread; end
  def schedule(*args, &blk); end
  def start; end
  def stop; end
end
class GRPC::RpcServer
  def add_http2_port(*args, &block); end
  def add_rpc_descs_for(service); end
  def assert_valid_service_class(cls); end
  def available?(an_rpc); end
  def handle(service); end
  def implemented?(an_rpc); end
  def initialize(pool_size: nil, max_waiting_requests: nil, poll_period: nil, pool_keep_alive: nil, connect_md_proc: nil, server_args: nil, interceptors: nil); end
  def loop_handle_server_calls; end
  def new_active_server_call(an_rpc); end
  def rpc_descs; end
  def rpc_handlers; end
  def run; end
  def run_till_terminated; end
  def run_till_terminated_or_interrupted(signals, wait_interval = nil); end
  def running?; end
  def running_state; end
  def self.setup_connect_md_proc(a_proc); end
  def stop; end
  def stopped?; end
  def transition_running_state(target_state); end
  def wait_till_running(timeout = nil); end
  extend Forwardable
  include GRPC::Core::CallOps
  include GRPC::Core::TimeConsts
end
class GRPC::InterceptorRegistry
  def build_context; end
  def initialize(interceptors = nil); end
end
class GRPC::InterceptorRegistry::DescendantError < StandardError
end
class GRPC::Interceptor
  def initialize(options = nil); end
end
class GRPC::ClientInterceptor < GRPC::Interceptor
  def bidi_streamer(requests: nil, call: nil, method: nil, metadata: nil); end
  def client_streamer(requests: nil, call: nil, method: nil, metadata: nil); end
  def request_response(request: nil, call: nil, method: nil, metadata: nil); end
  def server_streamer(request: nil, call: nil, method: nil, metadata: nil); end
end
class GRPC::ServerInterceptor < GRPC::Interceptor
  def bidi_streamer(requests: nil, call: nil, method: nil); end
  def client_streamer(call: nil, method: nil); end
  def request_response(request: nil, call: nil, method: nil); end
  def server_streamer(request: nil, call: nil, method: nil); end
end
class GRPC::InterceptionContext
  def initialize(interceptors = nil); end
  def intercept!(type, args = nil); end
end
